# Note: Synchronized Workflow, if you want to edit this please do so in the following repository: https://github.com/Combyne-Ag/github-actions
name: Build Docker Image

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      awsRegion:
        required: false
        type: string
        default: us-east-1
      isDeployment:
        required: false
        type: boolean
        default: true
      isWeb:
        required: true
        type: boolean
    secrets:
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_KEY:
        required: true
      SERVICE_NAME:
        required: true

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # If we are in a web workflow, we need to download the build files first
      # - name: Download Build Files (Web)
      #   if: ${{ inputs.isWeb }}
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: build-files
      #     path: ./build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ inputs.awsRegion }}

      # This is needed to set the right docker tag
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.6.0

      - name: Set Container/Service Name
        run: |
          if [ "${{ inputs.environment }}" == "release" ]; then
            echo "CONTAINER_SERVICE_NAME=combyne-prod-${{ secrets.SERVICE_NAME }}" >> $GITHUB_ENV
          else 
            echo "CONTAINER_SERVICE_NAME=combyne-${{ secrets.SERVICE_NAME }}" >> $GITHUB_ENV
          fi

      - name: Create and save Image name
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.CONTAINER_SERVICE_NAME }}
          IMAGE_TAG: "latest"
        run: |
          imageName="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Image $imageName"

          # Set image name in the env
          echo "IMAGE_NAME=$imageName" >> $GITHUB_ENV

          # Save image name in a file
          touch .docker-image-name-${{ secrets.SERVICE_NAME }}
          echo $imageName >> .docker-image-name-${{ secrets.SERVICE_NAME }}
          cat .docker-image-name-${{ secrets.SERVICE_NAME }}

      # Doesn't upload the image name file if we are not deploying
      - name: Upload Image Name File
        uses: actions/upload-artifact@v3
        if: ${{ inputs.isDeployment }}
        with:
          name: docker-image-name-${{ secrets.SERVICE_NAME }}
          path: .docker-image-name-${{ secrets.SERVICE_NAME}}

      - name: Build and tag Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} -f Dockerfile .

      # Doesn't upload the image if we are not deploying
      - name: Upload Image
        if: ${{ inputs.isDeployment }}
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: ${{ env.IMAGE_NAME }}
